# frozen_string_literal: true

require 'rake'

cmd_images_packer =
  'cd packer && ' \
  'packer build ' \
  "--var 'ansible_environment=%<pipeline>s' " \
  "--var 'ansible_playbook=%<playbook>s' " \
  "--var 'base_repo=%<base_repo>s' " \
  "--var 'base_user=%<base_user>s' " \
  "--var 'base_tag=latest' " \
  "--var 'local_user=%<local_user>s' " \
  "--var 'target_repo=%<target_repo>s' " \
  "--var 'target_tag=latest' " \
  'templates/docker/takelbase/project/build_from_prod.json'

cmd_images_molecule =
  'TAKELAGE_PROJECT_ENV=%<pipeline>s ' \
  'TAKELAGE_PROJECT_IMG=%<image>s ' \
  'TAKELAGE_MOLECULE_VERIFIER_FILES=%<files>s ' \
  'TAKELAGE_MOLECULE_VERIFIER_PLAYS=%<plays>s ' \
  'bash -c ' \
  "'cd ansible && molecule %<job>s --scenario-name image'"

jobs = \
  %i[converge
     destroy
     lint
     login
     test
     verify]

cmd_images_docker_pull = 'docker pull ' \
  "#{@project['dockerhub_base_user']}/" \
  "#{@project['dockerhub_base_repo']}:" \
  'latest'

# rubocop:disable Metrics/BlockLength
namespace :images do
  desc 'Update docker base image'
  task :update do
    @commands << cmd_images_docker_pull
  end

  @project['images'].each do |project_image|
    image = project_image.first
    namespace image.to_sym do |env|
      subtasks(env.scope.path) do
        layers = @project['images'][image]['layers']
        @project['pipelines'].each do |pipeline|
          namespace pipeline.to_sym do |pipeline_env|
            if layers.count == 1
              desc "Build image #{image}"
              task build: "#{pipeline_env.scope.path}:build:layer:01-#{layers.first}"
            else
              # more than one layer
              namespace :build do
                namespace :to do
                  layers[0..-1].each_with_index do |layer, index|
                    number = index.next.to_s.rjust(2, '0')
                    dependencies = []
                    layers[0..-2].each_with_index do |sublayer, subindex|
                      next if index < subindex

                      subnumber = subindex.next.to_s.rjust(2, '0')
                      dependencies << "images:#{image}:#{pipeline}:build:layer:#{subnumber}-#{sublayer}".to_sym
                    end
                    desc "Build layers up to layer #{layer} of image #{image}"
                    task "#{number}-#{layer}".to_sym => dependencies
                  end
                end

                namespace :from do
                  layers[0..-1].each_with_index do |layer, index|
                    number = index.next.to_s.rjust(2, '0')
                    dependencies = []
                    layers[0..-1].each_with_index do |sublayer, subindex|
                      if subindex > index
                        subnumber = subindex.next.to_s.rjust(2, '0')
                        dependencies << "images:#{image}:#{pipeline}:build:layer:#{subnumber}-#{sublayer}".to_sym
                      end
                    end
                    desc "Build layers from to layer #{layer} of image #{image}"
                    task "#{number}-#{layer}".to_sym => dependencies
                  end
                end
              end
            end

            namespace :build do
              namespace :layer do
                parent_layer = ''
                layers.each_with_index do |layer, index|
                  parent_number = index.to_s.rjust(2, '0')
                  number = index.next.to_s.rjust(2, '0')
                  target_repo = "#{@project['name']}-#{image}-#{number}-#{layer}"
                  # first image
                  if index.zero?
                    base_repo = @project['dockerhub_base_repo']
                    base_user = @project['dockerhub_base_user']
                  else
                    base_repo = "#{@project['name']}-#{image}-#{parent_number}-#{parent_layer}"
                    base_user = @project['local_user']
                  end
                  # last
                  target_repo = "#{@project['name']}-#{image}-#{pipeline}" if index.next == layers.count

                  parent_layer = layer
                  # desc "Build layer #{layer} from base layer #{parent_layer} of image #{imagename}"
                  task "#{number}-#{layer}".to_sym do
                    @commands << format(
                      cmd_images_packer,
                      pipeline: pipeline,
                      playbook: "playbook-#{layer}.yml",
                      base_repo: base_repo,
                      base_user: base_user,
                      local_user: @project['local_user'],
                      target_repo: target_repo
                    )
                  end
                end
              end
            end

            # no pipeline as these jobs use the target image
            namespace :molecule do
              jobs.each do |job|
                desc "#{job.capitalize} image #{image}"
                task job.to_sym do
                  @commands << format(
                    cmd_images_molecule,
                    files: molecule_verifier_files(layers),
                    image: image,
                    job: job,
                    pipeline: pipeline,
                    plays: molecule_verifier_plays(layers)
                  )
                end
              end
            end
          end
        end
      end
    end
  end
end
# rubocop:enable Metrics/BlockLength

private

def molecule_verifier_files(layers)
  verifier_files = []
  layers.each do |layer|
    playbook = YAML.load(File.read("ansible/playbook-#{layer}.yml"))
    playbook[0]['roles'].each do |role|
      verifier_files << "\"../../../roles/#{role}/molecule/default/system/test_*.py\""
      verifier_files << "\"../../../roles/#{role}/molecule/default/tests/test_*.py\""
    end
  end
  "'[#{verifier_files.join(',')}]'"
end

def molecule_verifier_plays(layers)
  verifier_plays = []
  layers.each do |layer|
    verifier_plays << "../../playbook-#{layer}.yml"
  end
  "'#{verifier_plays.join(':')}'"
end
